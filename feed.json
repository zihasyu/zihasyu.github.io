{
    "version": "https://jsonfeed.org/version/1",
    "title": "carzo",
    "subtitle": "Zihasyu's Personal Site",
    "icon": "http://example.com/images/favicon.ico",
    "description": "Hope friends and I can get the happiness we deserve",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/07/31/Feature-based-Delta-Summary/",
            "url": "http://example.com/2024/07/31/Feature-based-Delta-Summary/",
            "title": "Feature-based Delta Summary",
            "date_published": "2024-07-30T16:50:44.000Z",
            "content_html": "<h2 id=\"fearture-based-delta共性\"><a class=\"anchor\" href=\"#fearture-based-delta共性\">#</a> Fearture-based  Delta 共性</h2>\n<h3 id=\"delta-compression-系统流程图\"><a class=\"anchor\" href=\"#delta-compression-系统流程图\">#</a> Delta Compression 系统流程图</h3>\n<p><img data-src=\"https://notepic-1327795028.cos.ap-chengdu.myqcloud.com/pic/202407291513831.png\" alt=\"image.png\" /><br />\nDeduplication 能过滤掉重复块，即 savesize 为 0，只留下一个 recipe 大小的存储开销用于日后恢复。所以需要计算 SF 并去查 SFindex 表的块都是已经用 FP 去重过滤后得到的 unique chunk。后续会详细介绍独属于对 unique chunk 的处理，这部分是 delta compression system 比只去重系统要增加的部分。</p>\n<h3 id=\"fearture-based-通用的流程图\"><a class=\"anchor\" href=\"#fearture-based-通用的流程图\">#</a> Fearture-based 通用的流程图</h3>\n<p><img data-src=\"https://notepic-1327795028.cos.ap-chengdu.myqcloud.com/pic/202407291506456.png\" alt=\"image.png\" /><br />\n 每个独特快都要计算 SF (若干个 ori feature 经过线性变换后得到的 1 个新的 feature 叫做 super feature)，先拿去查表，有相似块的话做 delta compression，没有的话把算好的 SF 插入 SFindex 中即可，那之后对当前块做 local compression 后持久化。</p>\n<h3 id=\"sf-index相关-的通用流程图\"><a class=\"anchor\" href=\"#sf-index相关-的通用流程图\">#</a> SF-index 相关 的通用流程图</h3>\n<p><img data-src=\"https://notepic-1327795028.cos.ap-chengdu.myqcloud.com/pic/202407291526625.png\" alt=\"image.png\" /><br />\n 再将需要实现的部分总结并抽象出来，发现实际上不同 feature-based 方法的核心与差异在于 SF 的计算（Rolling hash，Linear transform）这个方法，此外还要根据 SFindex 的结构再去实现 SF_Find, SF_insert 这两个方法。故在实现不同的 feature-based 方法时重点实现这三个函数，其余很多部分可以复用。</p>\n<h2 id=\"sf-methods\"><a class=\"anchor\" href=\"#sf-methods\">#</a> SF Methods</h2>\n<h3 id=\"n-transform-sf\"><a class=\"anchor\" href=\"#n-transform-sf\">#</a> N-transform-SF</h3>\n<p>开山之作，作者写的很随意，拿和同事的对话当引言，真正意义上的 master piece，去看原文吧。<br />\n实现要点：</p>\n<ul>\n<li>Rolling hash: <strong>Rabin 指纹</strong>去算滚动哈希，对同一个块用 12 套参数 (a,b) 求得 12 个不同的原始特征 ori feature</li>\n<li>Linear transform: 将 12 个 ori feature 分 3 组，线性变换为 3 个 SF，存储在三个哈希表中。</li>\n<li>压缩效果较好，时间开销极大<br />\n<img data-src=\"https://notepic-1327795028.cos.ap-chengdu.myqcloud.com/pic/202407291744198.png\" alt=\"image.png\" /></li>\n</ul>\n<h3 id=\"finesse\"><a class=\"anchor\" href=\"#finesse\">#</a> Finesse</h3>\n<p>经常被拿来对比的经典作。<br />\n实现要点：</p>\n<ul>\n<li>Rolling hash: <strong>Rabin 指纹</strong>去算滚动哈希，将一个 chunk 分为 12 个 subchunk，那之后用同 1 套参数对每个 subchunk 求 1 个 ori feature，这样合计 12 个 ori feature。// 只有 Finesse 做了分子块这个操作，有个隐形的限制是原始块不能小于一定值，这个值是其他方法的 12 倍大小，对 chunking 方式有一定限制。</li>\n<li>Linear transform: 将 12 个 ori feature 先组内排序，再分 3 组，线性变换为 3 个 SF，存储在三个哈希表中。</li>\n<li>压缩效果较差，时间开销减少一些<br />\n<img data-src=\"https://notepic-1327795028.cos.ap-chengdu.myqcloud.com/pic/202407291744886.png\" alt=\"image.png\" /></li>\n</ul>\n<h3 id=\"odess\"><a class=\"anchor\" href=\"#odess\">#</a> Odess</h3>\n<p>在压缩效果和计算开销上都非常务实的作品，但可惜行文中自己的工作量不太够，没能中更好的期刊。<br />\n实现要点：</p>\n<ul>\n<li>Rolling hash: <strong>Gear 滚动哈希 + CDS 抽样</strong>去算滚动哈希，利用 CDS 使得只用对 1/128 个基于内容而定的窗口计算哈希值，虽然对同一个块用 12 套参数 (a,b) 求得 12 个不同的原始特征 ori feature，但因为是抽样计算，所以耗时比 finesse 还要短。</li>\n<li>Linear transform: 将 12 个 ori feature 分 3 组，线性变换为 3 个 SF，存储在三个哈希表中。</li>\n<li>压缩效果较好，时间开销减少更多<br />\n<img data-src=\"https://notepic-1327795028.cos.ap-chengdu.myqcloud.com/pic/202407291747134.png\" alt=\"image.png\" /></li>\n</ul>\n<h3 id=\"palantir\"><a class=\"anchor\" href=\"#palantir\">#</a> Palantir</h3>\n<p>提出了一些观点值得思考，但工程角度的总体评价远不如 Odess<br />\n 实现要点：</p>\n<ul>\n<li>Rolling hash: <strong>Gear 滚动哈希 + CDS 抽样</strong>去算滚动哈希，利用 CDS 使得只用对 1/128 个基于内容而定的窗口计算哈希值，虽然对同一个块用 12 套参数 (a,b) 求得 12 个不同的原始特征 ori feature，但因为是抽样计算，所以耗时比 finesse 还要短。</li>\n<li>Linear transform: 将 12 个 ori feature 分 3 组，线性变换为 3 个 SF，存储在 3 个哈希表中。第二层：将 12 个 ori feature 分 4 组，线性变换为 4 个 SF，存储在 4 个哈希表中。第三层：将 12 个 ori feature 分 4 组，线性变换为 6 个 SF，存储在 6 个哈希表中。合计 13 个 index。// 更多的空间开销和计算开销</li>\n<li>为减少每个 unique chunk 有 13 个 SFindex 的开销，推出了生命周期机制，第二层的 index 在插入 5 个版本后清除，第三层的 index 在插入 2 个版本后清除。// 更多的计算开销。</li>\n<li>因清除的存在，palantir 提出该设计下需要给重复块也计算 SF，来查询是否需要补充第 2、3 层的 SFindex。// 更多的计算开销</li>\n<li>压缩效果短期非常好，长期效果非常差，时间开销极其多。</li>\n</ul>\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>大部分改进 delta compression 的论文都是从改进本章节 SF 的计算与选择出发的，改进的指标会是吞吐量或者 overall compression ratio。<br />\n不同的 SF 组装方法，本质是设计了一个不同相似度阈值，较过低或过高都会有损压缩率。每个块及以其作 base 的 delta chunk 的最优阈值是不同的，每个数据集更是不同。当然在小数据集上降低阈值寻找更多的相似块是有利于 overall ratio 的。<br />\n而 palantir 看似设计了多个阈值，但长远来看还是降低了阈值，在追求 optimal overall ratio 的道路上这是有害的。</p>\n",
            "tags": [
                "Compression algorithms",
                "Compression",
                "Storage system",
                "Operating system",
                "Computer science",
                "Feature-based"
            ]
        },
        {
            "id": "http://example.com/2024/07/22/hello-world/",
            "url": "http://example.com/2024/07/22/hello-world/",
            "title": "Hello World",
            "date_published": "2024-07-22T13:54:25.496Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/07/04/Summary%20of%20Chunking/",
            "url": "http://example.com/2024/07/04/Summary%20of%20Chunking/",
            "title": "Chunking summary",
            "date_published": "2024-07-04T11:48:04.000Z",
            "content_html": "<h2 id=\"chunking-flow\"><a class=\"anchor\" href=\"#chunking-flow\">#</a> Chunking flow</h2>\n<h3 id=\"flow-chart\"><a class=\"anchor\" href=\"#flow-chart\">#</a> Flow chart</h3>\n<p><img data-src=\"https://notepic-1327795028.cos.ap-chengdu.myqcloud.com/pic/202407251358457.png\" alt=\"image.png\" /></p>\n<h3 id=\"why-only-read-part\"><a class=\"anchor\" href=\"#why-only-read-part\">#</a> Why only Read part\\</h3>\n<p>we unuslly read 128MiB a time from the Tar to Chunking. this will prevent too much memory from being consumed.<br />\nwhen the ReadFileBuffer is about to reach the end, we need to seekg the next beginning of the buffer.</p>\n<h3 id=\"code-sample\"><a class=\"anchor\" href=\"#code-sample\">#</a> Code sample</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Chunker</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Chunking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> end <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> totalOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>readFileBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> READ_FILE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>readFileBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> READ_FILE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        end <span class=\"token operator\">=</span> inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        size_t len <span class=\"token operator\">=</span> inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">gcount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        localOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> localOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> MAXCHUNKSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>localOffset <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            Chunk_t chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">uint32_t</span> cp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cp <span class=\"token operator\">=</span> <span class=\"token function\">CutPoint</span><span class=\"token punctuation\">(</span>readFileBuffer <span class=\"token operator\">+</span> localOffset<span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> localOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            chunk<span class=\"token punctuation\">.</span>chunkPtr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>chunkPtr<span class=\"token punctuation\">,</span> readFileBuffer <span class=\"token operator\">+</span> localOffset<span class=\"token punctuation\">,</span> cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            chunk<span class=\"token punctuation\">.</span>chunkSize <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            localOffset <span class=\"token operator\">+=</span> cp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        totalOffset <span class=\"token operator\">+=</span> localOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span>totalOffset<span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>beg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"chunking-methods\"><a class=\"anchor\" href=\"#chunking-methods\">#</a> Chunking methods</h2>\n<p>the different  chunking methods are reflected in the way cp is obtained.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">uint32_t</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">Chunking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"fixed-size\"><a class=\"anchor\" href=\"#fixed-size\">#</a> Fixed-size</h3>\n<p>As a tradeoff between Deduplication and throughput, chunking methods typically use 8KiB as the desired average size.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token class-name\">Chunker</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FixedSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FixedChunkSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>But the fixed-size chunking will encounter a very serious boundary migration problem, which will allow the reactivity to drop.</p>\n<h3 id=\"cdc\"><a class=\"anchor\" href=\"#cdc\">#</a> CDC</h3>\n<p>When the sliding hash in the window is equal to 0 with the mask that operation set in advance, it is used as a breakpoint.This is called content-defined chunking.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token class-name\">Chunker</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CutPointCDC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">uint32_t</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> fp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fp <span class=\"token operator\">=</span> fp <span class=\"token operator\">-</span> Rabin<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>windowSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> Rabin<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">&amp;</span> MASK_GEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>The expected block size is related to the significant bit 1 of the mask. For example, if I want the block size to be 8KiB on average, then I need 13 1's in the mask.</p>\n<h3 id=\"gear\"><a class=\"anchor\" href=\"#gear\">#</a> Gear</h3>\n<p>Gear Hash reduces the computational overhead of the rolling hash by fixing the significant bit 1 of the mask to be the least significant bit, so that gear can obtain the rolling hash value by bit operation.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token class-name\">Chunker</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CutPointGear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">uint32_t</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> fp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> GEAR<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">&amp;</span> MASK_GEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"fastcdc\"><a class=\"anchor\" href=\"#fastcdc\">#</a> FastCDC</h3>\n<p>FastCDC solves two problems, one is to further improve throughput, and the other is to standardize block sizes in the 4KiB-16KiB range. It skips the first 4KiB without having to compute the hash, and its mask is also standardized to be bitwise, so that when it reaches 16KiB, it immediately gets the breakpoint, whether it meets the breakpoint condition or not. In addition, to achieve an average size of 8KiB, he uses different masks to generate breakpoints in 4K-8K and 8K-16K.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">uint32_t</span> <span class=\"token class-name\">Chunker</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CutPointFastCDC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">uint32_t</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> fp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">uint32_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint32_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>minChunkSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>normalSize<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        fp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> GEAR<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">&amp;</span> maskS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint32_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>maxChunkSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        fp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> GEAR<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">&amp;</span> maskL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"mtar\"><a class=\"anchor\" href=\"#mtar\">#</a> mTar</h3>\n<p>mTar argues that the metadata head of the periodic appearance of tar reduces the Deduplication rate</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MTar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ttranslate the Tar files to mTar files<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">FastCDC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>The chunking method is a part of the compression system that determines the theoretical upper bound. If the obtained chunk contains extremely high boundary offset, then the best feature value selection method cannot obtain excellent results.</p>\n",
            "tags": [
                "Compression algorithms",
                "Chunking",
                "Compression",
                "Storage system",
                "Operating system",
                "Computer science"
            ]
        }
    ]
}